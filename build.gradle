buildscript {
    

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
        google()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "gradle.plugin.com.pledgecomputers:gradle-selenium-plugin:1.0.8"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"

    }
}


allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "com.pledgecomputers.gradle.spawn"


    version = '1.0'
    ext {
        appName = "my-gdx-pong"
        gdxVersion = '1.9.6'
        roboVMVersion = '2.3.1'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
}


project(":desktop") {
    apply plugin: "java"
    apply plugin: "org.sonarqube"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        
    }
}

project(":android") {
    apply plugin: "android"
    apply plugin: "org.sonarqube"

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.organization","davidmdlcg-github"
            property "sonar.login", "bae3cbecf64fab4806fa42f36d833d42ef8b05de"
        }
    }


    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86_64"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
        
    }
}

project(":core") {
    apply plugin: "java"
    apply plugin: "org.sonarqube"


    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        
    }
}

tasks.eclipse.doLast {
    delete ".project"
}


ext {
    archivo = project.hasProperty('archivo') ? project.property('archivo') : 'defaultName'
}


task extraerRama (type: Exec){
        
        description 'Pulls git.'
        commandLine "git", "pull"
    

}

task actualizarRamaYSubir (type: Exec){
        
        description 'Push git.'
        commandLine "git", "push"
    

}

task hola {
doLast{
    println "Holaaaaaaaa"
}
}

task adios {
doLast{
    println "Adddiiiosssss"
}
}

actualizarRamaYSubir.dependsOn('extraerRama')
actualizarRamaYSubir.dependsOn(':core:compileJava')

tasks.getByPath(':core:compileJava').mustRunAfter(':extraerRama')



//tasks.getByPath('android:installDebug').mustRunAfter('root:extraerRama')


//tasks.getByPath('android:installDebug').mustRunAfter root:extraerRama



//tasks.getByPath('adios').doFirst(hola)

task iniciarEmulador{
    spawn {
        process {
            def path
            def localProperties = project.file("local.properties")
            if (localProperties.exists()) {
                Properties properties = new Properties()
                localProperties.withInputStream { instr ->
                    properties.load(instr)
                }
                def sdkDir = properties.getProperty('sdk.dir')
                if (sdkDir) {
                    path = sdkDir
                } else {
                    path = "$System.env.ANDROID_HOME"
                }
            } else {
                path = "$System.env.ANDROID_HOME"
            }

            def emulator = path + "/emulator/emulator"
            
            command = [emulator,'-avd', 'Nexus_6_API_25']
            
            sleep(10000)

            ready = "emulator: ### WARNING: /etc/localtime does not point to /usr/share/zoneinfo/, can't determine zoneinfo timezone name" 
            directory = project.projectDir
            

        }
    }
}

task ejecutarApp(type: Exec) {
    def path
    def localProperties = project.file("local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.mygdx.pong/com.mygdx.game.AndroidLauncher', '-a', 'android.intent.action.MAIN', '-c','android.intent.category.LAUNCHER'
}

task desplegarApp {
        dependsOn ':iniciarEmulador'
        dependsOn ':android:installDebug'
        dependsOn ':ejecutarApp'
}


tasks.getByPath(':android:installDebug').mustRunAfter(':iniciarEmulador')
tasks.getByPath(':ejecutarApp').mustRunAfter(':android:installDebug')










